# authentication
if yes?("Would you like to add user authentication?")
  @authentication = true
  gem("devise", "~> 2.1.2")
  run 'bundle install'
  run 'rails generate devise:install'

  run 'subl config/initializers/devise.rb'

  until yes?("Have you reviewed the devise initializer? eg update the `mailer_sender?`")
  end

  gsub_file "config/environments/development.rb", /\nend/,
    "\n  config.action_mailer.default_url_options = { :host => '0.0.0.0:5000' }\nend"

  gsub_file "config/environments/production.rb", /\nend/,
    "\n  config.action_mailer.default_url_options = { :host => 'www.myappdomain.com' }\nend"

  unless @static_pages
    insert_into_file "config/routes.rb",
      "\n  root :to => \"public#index.html\"\n",
      after: "::Application.routes.draw do"
  end

  puts "Next add the User attributes.  Devise will add a unique email attribute"
  puts "plus password attributes so leave those off."
  user_attributes = ask("List attributes in format [field[:type][:index/unique]]")
  attributes_confirmed = false
  until attributes_confirmed
    if yes?("Are you happy with the attribute string \"#{user_attributes}\"?")
      attributes_confirmed = true
    else
      user_attributes = ask("List attributes in format [field[:type][:index/unique]]")
    end
  end
  puts "#{user_attributes}"

  run "rails g model User #{user_attributes}"

  # generate user model
  rake "db:migrate"
  rake "db:test:prepare"

  # attributes generated by devise are
  #  :email, :password, :password_confirmation, :remember_me
  # specs for the devise attributes are already written in the template.
  # see next lines for `update model specs`
  
  # udpate model specs
  remove_file "spec/models/user_spec.rb"
  get "https://raw.github.com/BenU/rails-templates/master/spec/models/user_spec.rb",
  "spec/models/user_spec.rb" 

  # udpate `spec/models/user_spec.rb` with dynamically generated
  # specs for new user attributes.  Some are `pending` placeholders
  attributes_accesible = []
  attributes_protected = []

  user_attributes.split().each do |attribute_string|
    attribute, data_type = attribute_string.split(":")[0], attribute_string.split(":")[1]

    if yes?("Do you want #{attribute} to be attributes_accesible?")
      attributes_accesible << attribute
    else
      attributes_protected << attribute
    end

    attribute_default = ask("In user_spec.rb, what do you want the #{data_type} default value for #{attribute} to be?")
    # convert `attribute_default` string to appropriate data-type
    attribute_default = case data_type
                        when "boolean"
                          attribute_default == "true" ? true : false
                        when "decimal"
                          require 'bigdecimal'
                          BigDecimal.new(attribute_default)
                        when "float"
                          attribute_default.to_f
                        when "integer"
                          attribute_default.to_i
                        else 
                          # just keep as string... and add quotation marks
                          "\"#{attribute_default}\""
                        end

    gsub_file "spec/models/user_spec.rb", /\)#additional_attributes/,
      ",\n\t\t\t\t\t\t\t\t\t\t\t#{attribute}: #{attribute_default})#additional_attributes"

    insert_into_file "spec/models/user_spec.rb",
      "  it { should respond_to(:#{attribute}) }\n",
      before: "#_additional_attributes_specs"

    insert_into_file "spec/models/user_spec.rb",
      "  pending \"add some custom specs for #{attribute}.\"\n",
      after: "# add pending specs for additional attributes"

  end

  # remove placeholders from `spec/models/user_spec.rb`
  gsub_file "spec/models/user_spec.rb", /#additional_attributes/, ""
  gsub_file "spec/models/user_spec.rb", /#_additional_attributes_specs/, ""
  gsub_file "spec/models/user_spec.rb", /# add pending specs for additional attributes/, ""

  until yes?("Get spork running in additional terminal tab.  Ready to proceed?")
  end
  run "rspec spec"

  run 'rails generate devise User'

  # add email validation and password_confirmation presence: true to models/user.rb
  insert_into_file "app/models/user.rb",
    "\n\n  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX },
                    uniqueness: { case_sensitive: false }

  validates :password, length: { minimum: 6 }
  validates :password_confirmation, presence: true\n\n",
    before: "\nend"

  run 'subl app/models/user.rb'

  until yes?("Have you reviewed the user model devise options?")
  end

  devise_migration_file = Dir['db/migrate/*_add_devise_to_users.rb'].first
  run "subl #{devise_migration_file}"

  until yes?("Have you reviewed and updated the `_add_devise_to_users` migration?")
  end

  rake "db:migrate"
  rake "db:test:prepare"

  until yes?("Restart spork in additional terminal tab.  Ready to proceed?")
  end
  run "rspec spec"

  # set up integration tests to make sure the all attributes_accessible
  # attributes are on the sign up form.

  # set up integration tests to make sure that all attributes_protected
  # attributes are not on the sign up form

=begin

  # generate integration tests for user pages based on model attributes
  # ***** Add click_link "Sign up now!" integration test to end of layout links specs 
  # on static_pages integration tests

  # generate user controller, routes and views

  # get user pages integration tests
  get "https://raw.github.com/BenU/rails-templates/master/spec/requests/user_pages_spec.rb", 
  "spec/requests/user_pages_spec.rb"


  # annotate the user model
  run "annotate --position before"
  
  # git commit
  git add: "."
  git commit: "-am 'Add user and basic authentication'"
=end
end
